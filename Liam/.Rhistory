print(datatable(total.out, rownames=F, extensions = 'Buttons',
options = list(dom = 'Bfrtip',
buttons = c('excel', "csv"))))
pbkids<-read.csv("pbkids.csv", na.strings="-1") # CAREFUL: make sure no plausible -1 vals
dim(pbkids)
pbkids[1:5,]
head(pbkids)
par(mfrow=c(1,2))
hist(pbkids$iq)
hist(pbkids$bld82)
summary(pbkids$bld82)
summary(pbkids$iq)
## creating a nice looking table ##
out.bld82<-c(var="bld82", summary(pbkids$bld82))
names(out.bld82)<-c(names(out.bld82)[-8], "NA")
out.iq<-c(var="iq", summary(pbkids$iq), "NA"=0)
total.out<-rbind(out.bld82, out.iq)
print(datatable(total.out, rownames=F, extensions = 'Buttons',
options = list(dom = 'Bfrtip',
buttons = c('excel', "csv"))))
knitr::opts_chunk$set(echo = TRUE)
library(DT) # datatable library, 1st time used at line 44
pbkids<-read.csv("pbkids.csv", ##na.strings="-1") # CAREFUL: make sure no plausible -1 vals
pbkids<-read.csv("pbkids.csv", ##na.strings="-1") # CAREFUL: make sure no plausible -1 vals
dim(pbkids)
pbkids[1:5,]
head(pbkids)
par(mfrow=c(1,2))
hist(pbkids$iq)
hist(pbkids$bld82)
summary(pbkids$bld82)
summary(pbkids$iq)
## creating a nice looking table ##
out.bld82<-c(var="bld82", summary(pbkids$bld82))
names(out.bld82)<-c(names(out.bld82)[-8], "NA")
out.iq<-c(var="iq", summary(pbkids$iq), "NA"=0)
total.out<-rbind(out.bld82, out.iq)
print(datatable(total.out, rownames=F, extensions = 'Buttons',
options = list(dom = 'Bfrtip',
buttons = c('excel', "csv")))) # can auto-export as CSV or Excel File
pbkids<-read.csv("pbkids.csv")#, #na.strings="-1" # CAREFUL: make sure no plausible -1 vals
dim(pbkids)
pbkids[1:5,]
head(pbkids)
par(mfrow=c(1,2))
hist(pbkids$iq)
hist(pbkids$bld82)
summary(pbkids$bld82)
summary(pbkids$iq)
## creating a nice looking table ##
out.bld82<-c(var="bld82", summary(pbkids$bld82))
names(out.bld82)<-c(names(out.bld82)[-8], "NA")
out.iq<-c(var="iq", summary(pbkids$iq), "NA"=0)
total.out<-rbind(out.bld82, out.iq)
print(datatable(total.out, rownames=F, extensions = 'Buttons',
options = list(dom = 'Bfrtip',
buttons = c('excel', "csv")))) # can auto-export as CSV or Excel File
pbkids$bld82<-ifelse(pbkids$bld82==-1,NA,pbkids$bld82)
par(mfrow=c(1,2))
hist(pbkids$iq)
hist(pbkids$bld82)
summary(pbkids$iq)
summary(pbkids$bld82)
plot(iq~bld82, data=pbkids)
plot(pbkids$bld82,pbkids$iq)
##install.packages("ggplot2")
library(ggplot2)
ggplot(pbkids, aes(y = iq, x = bld82)) +
geom_point(col = "black") +
geom_smooth(aes(x = bld82,y = iq), method="lm") +
theme_bw()
temp<-lm(iq~bld82,data=pbkids)
temp
summary(temp)
print("names for temp")
names(temp)
print("names for summary(temp)")
names(summary(temp))
names(summary(temp))
summary(temp)$coefficients
beta1<-summary(temp)$coefficients[2,1]
se_beta1<-summary(temp)$coefficients[2,2]
t_stat<-(beta1-0)/se_beta1  ## test statistic
t_stat
pt(abs(t_stat), df=119, lower.tail=F)*2  ##two-sided p-value
t_stat2<-(beta1-2)/se_beta1
t_stat2
pt(abs(t_stat2), df=119, lower.tail=F)*2
### null model ###
m0<-lm(iq~1,data=pbkids)
### full model ###
m1<-lm(iq~bld82,data=pbkids)
### ANOVA - comparing models ###
anova(m0,m1)
### null model ###
m0<-lm(iq~1,data=pbkids[!is.na(pbkids$bld82),])
### full model ###
m1<-lm(iq~bld82,data=pbkids)
### ANOVA - comparing models ###
anova(m0,m1)
par(mfrow=c(1,1))
plot(iq~bld82, data=pbkids)
abline(h=100, col="blue", lty=2)
abline(v=5, col="red", lty=2)
abline(v=10, col="red", lty=2)
library(ggplot2)
ggplot(pbkids, aes(y = iq, x = bld82)) +
geom_point(col = "black") +
geom_smooth(aes(x = bld82,y = iq), method="lm", level=0.99) +
theme_bw()
ggplot(pbkids, aes(y = iq, x = bld82)) +
geom_point(col = "black") +
geom_smooth(aes(x = bld82,y = iq), method="lm", level=0.80) +
theme_bw()
temp<-lm(iq~bld82,data=pbkids)
d = data.frame(pbkids[!is.na(pbkids$bld82),], predict(temp, interval="prediction"))
ggplot(d, aes(y = iq, x = bld82)) +
geom_ribbon(aes(ymin=lwr,ymax=upr,fill="prediction")) +
geom_smooth(method="lm",aes(fill="confidence")) +
geom_smooth(aes(x = bld82,y = iq), method="lm") +
geom_point(col = "black") +
scale_fill_manual('Interval', values = c('blue', 'gray')) +
theme_bw()
predict(temp, new=data.frame(bld82=5),interval="confidence")
predict(temp, new=data.frame(bld82=5),interval="prediction")
predict(temp, new=data.frame(bld82=5),interval="confidence", level=0.90)
predict(temp, new=data.frame(bld82=5),interval="prediction", level=0.90)
## be careful with extrapolation! ##
predict(temp, new=data.frame(bld82=500),interval="confidence", level=0.90)
res<-residuals(temp)
studentized<-rstudent(temp)
summary(res)
summary(studentized)
par(mfrow=c(1,3))
hist(res)
hist(studentized)
plot(res,studentized)
##  fitted values  ##
fitted<-fitted(temp)
plot(fitted,studentized)
abline(h=0,lty=2)
par(mfrow=c(1,2))
hist(studentized)
library(car)
qqPlot(studentized)
shapiro.test(studentized)
##install.packages("lmtest")
library(lmtest)
?dwtest
### order pbkids dataset by area to lead smelter  ###
pbkids_ord<-pbkids[order(pbkids$area),]
dwtest(iq~bld82, data=pbkids_ord)
lm(iq~bld82+area, data=pbkids_ord)
summary(lm(iq~bld82+area, data=pbkids_ord))
dwtest(iq~bld82+area, data=pbkids_ord)
knitr::opts_chunk$set(echo = TRUE)
pbkids<-read.csv("pbkids.csv", na.strings="-1") ##
pbkids[1:5,]
##  look at the data first  ##
dim(pbkids)
summary(pbkids$bld82)
summary(pbkids$bld83)
par(mfrow=c(1,3))
hist(pbkids$bld82)
hist(pbkids$bld83)
plot(pbkids$bld82, pbkids$bld83)
tmp<-cor.test(pbkids$bld82, pbkids$bld83)
tmp
names(tmp)
tmp$p.value
shiny::runApp('Desktop/GitHub/beer tutorial')
runApp('Desktop/GitHub/eXtraordinarYBabiesStudy_ShinyApps/Liam')
runApp('Desktop/GitHub/eXtraordinarYBabiesStudy_ShinyApps/Liam')
runApp('Desktop/GitHub/eXtraordinarYBabiesStudy_ShinyApps/Liam')
runApp('Desktop/GitHub/eXtraordinarYBabiesStudy_ShinyApps/Liam')
runApp('Desktop/GitHub/eXtraordinarYBabiesStudy_ShinyApps/Liam')
### Libraries
library(shiny)
library(shinythemes)
library(tidyverse)
library(ggplot2)
library(ggrepel)
library(plotly)
library(kableExtra)
### Datasets
milestones <- readRDS("Milestones.RDS")
genpop <- readRDS("GenPop_Milestones.RDS")
indiv_percentiles <- readRDS("Individual_Percentiles.RDS")
milestone_list <- c(unique(milestones))
milestone_list
'''
column(
for item in milestone_list
numericInput("month", "Milestone 1",
min = 0, max = 150,
value)
)
# Percentile boxplot for Panel 3
output$indiv_perc <- renderPlotly({
'''      #Subset domain (NOT NEEDED)
if(input$domain == "Motor"){
indiv_percentiles <- indiv_percentiles %>% filter(domain == "Motor")
}
if(input$domain == "Language"){
indiv_percentiles <- indiv_percentiles %>% filter(domain == "Language")
}
'''
'''
# Filter to age range (NOT NEEDED)
indiv_percentiles <- indiv_percentiles %>%
group_by(milestone) %>%
filter(min(Age, na.rm = T) >= input$age[1]) %>%
filter(max(Age, na.rm = T) <= input$age[2])
'''
# Explicitly reorder the milestone factor by median Age, descending
indiv_percentiles <- indiv_percentiles %>%
mutate(milestone = as.character(milestone)) %>%
mutate(milestone = fct_reorder(milestone, Age, .fun = median, .desc = FALSE))
indiv_dat <- indiv_percentiles %>% filter(study_id_extraordinary == input$selected_id) %>% filter(!is.na(Age))
sca = indiv_dat$sca_condition[1]
sca_milestones <- indiv_percentiles %>% filter(sca_condition == sca)
# Filter to percentile range
indiv_dat <- indiv_dat %>%
group_by(milestone) %>%
filter(min(Percentile >= input$percentile[1], na.rm = T) & max(Percentile <= input$percentile[2], na.rm = T))
sca_milestones <- sca_milestones %>% filter(milestone %in% indiv_dat$milestone)
# pick fill color
scafill = case_when(sca == "XXY" ~ "#fdb863",
sca == "XYY" ~ "cyan3",
sca == "XXX" ~ "#4B0082")
# Sort individual data by percentile
ordered_levels <- indiv_dat %>%
group_by(milestone) %>%
summarise(median_percentile = median(Percentile, na.rm = TRUE)) %>%
arrange(median_percentile) %>%
pull(milestone)
# make sure datasets are ordered  by percentiles
sca_milestones$milestone <- factor(sca_milestones$milestone, levels = ordered_levels)
indiv_dat$milestone <- factor(indiv_dat$milestone, levels = ordered_levels)
# Overlay all points for a better comparison
if(input$overlay == "Yes"){
p <- plot_ly(sca_milestones,
y = ~milestone,
x = ~Percentile,
color = I(scafill),
type = "box",
marker = list(size = 6, color = 'white', line = list(color = 'black', width = 1)),
boxpoints = "all",
jitter = 0.6,
pointpos = 0,
hoverinfo = "skip")
# plots without scatter
}else{
p <- plot_ly(sca_milestones,
y = ~milestone,
x = ~Percentile,
color = I(scafill),
type = "box",
boxpoints = FALSE,
hoverinfo = "skip")
}
# Specify the information that is shown when hovering over points
p <- p %>% add_trace(data = indiv_dat,
x = ~Percentile,
y = ~milestone,
type = "scatter",
mode = "markers",
marker = list(size = 15, color = 'red', symbol = '*'),
text = ~paste("ID:", study_id_extraordinary,
"<br>Age:", round(Age, 1), "months",
"<br>Percentile:", round(Percentile, 1)),
hoverinfo = "text",
inherit = FALSE) %>%
layout(xaxis = list(range = c(0, 100)),yaxis = list(title = ""),
shapes = list(
list(type = "rect", fillcolor = "rgba(255, 0, 0, 0.2)",
line = list(color = "red", width = 0), x0 = 90, x1 = 100, y0 = 0, y1 = 1, xref = "x", yref = "paper")
)
)
# Show the plot
p <- p %>%
layout(boxmode = "group",
xaxis = list(title = "Achievement Percentile",
tickfont = list(size = 14)),  # Custom x-axis label
yaxis = list(title = ""),
font = list(size = 16),
showlegend = FALSE)
p
})
}
'''
### Libraries
library(shiny)
library(shinythemes)
library(tidyverse)
library(ggplot2)
library(ggrepel)
library(plotly)
library(kableExtra)
### Datasets
milestones <- readRDS("Milestones.RDS")
genpop <- readRDS("GenPop_Milestones.RDS")
indiv_percentiles <- readRDS("Individual_Percentiles.RDS")
milestone_list <- c(unique(milestones))
milestone_list
### Libraries
library(shiny)
library(shinythemes)
library(tidyverse)
library(ggplot2)
library(ggrepel)
library(plotly)
library(kableExtra)
### Datasets
milestones <- readRDS("Milestones.RDS")
genpop <- readRDS("GenPop_Milestones.RDS")
indiv_percentiles <- readRDS("Individual_Percentiles.RDS")
milestone_list <- c(unique(milestones))
milestone_list
View(milestone_list)
### Libraries
library(shiny)
library(shinythemes)
library(tidyverse)
library(ggplot2)
library(ggrepel)
library(plotly)
library(kableExtra)
### Datasets
milestones <- readRDS("Milestones.RDS")
genpop <- readRDS("GenPop_Milestones.RDS")
indiv_percentiles <- readRDS("Individual_Percentiles.RDS")
milestone_list <- c(unique(indiv_percentiles))
milestone_list
### Libraries
library(shiny)
library(shinythemes)
library(tidyverse)
library(ggplot2)
library(ggrepel)
library(plotly)
library(kableExtra)
### Datasets
milestones <- readRDS("Milestones.RDS")
genpop <- readRDS("GenPop_Milestones.RDS")
indiv_percentiles <- readRDS("Individual_Percentiles.RDS")
milestone_list <- c(unique(indiv_percentiles$milestone))
milestone_list
milestone_list.length()
length(milestone_list)
runApp('Desktop/GitHub/eXtraordinarYBabiesStudy_ShinyApps/Liam')
runApp('Desktop/GitHub/eXtraordinarYBabiesStudy_ShinyApps/Liam')
runApp('Desktop/GitHub/eXtraordinarYBabiesStudy_ShinyApps/Liam')
runApp('Desktop/GitHub/eXtraordinarYBabiesStudy_ShinyApps/Liam')
runApp('Desktop/GitHub/eXtraordinarYBabiesStudy_ShinyApps/Liam')
runApp('Desktop/GitHub/eXtraordinarYBabiesStudy_ShinyApps/Liam')
runApp('Desktop/GitHub/eXtraordinarYBabiesStudy_ShinyApps/Liam')
runApp('Desktop/GitHub/eXtraordinarYBabiesStudy_ShinyApps/Liam')
runApp('Desktop/GitHub/eXtraordinarYBabiesStudy_ShinyApps/Liam')
knitr::opts_chunk$set(echo = TRUE)
library(DT) # datatable library, 1st time used at line 44
knitr::opts_chunk$set(echo = TRUE)
library(DT) # datatable library, 1st time used at line 44
pbkids<-read.csv("pbkids.csv")#, #na.strings="-1" # CAREFUL: make sure no plausible -1 vals
dim(pbkids)
pbkids[1:5,]
head(pbkids)
par(mfrow=c(1,2))
hist(pbkids$iq)
hist(pbkids$bld82)
summary(pbkids$bld82)
summary(pbkids$iq)
## creating a nice looking table ##
out.bld82<-c(var="bld82", summary(pbkids$bld82))
names(out.bld82)<-c(names(out.bld82)[-8], "NA")
out.iq<-c(var="iq", summary(pbkids$iq), "NA"=0)
total.out<-rbind(out.bld82, out.iq)
print(datatable(total.out, rownames=F, extensions = 'Buttons',
options = list(dom = 'Bfrtip',
buttons = c('excel', "csv")))) # can auto-export as CSV or Excel File
pbkids$bld82<-ifelse(pbkids$bld82==-1,NA,pbkids$bld82) # other way to do it, if __ = ___, replace with NA in col ____
par(mfrow=c(1,2))
hist(pbkids$iq)
hist(pbkids$bld82)
summary(pbkids$iq)
summary(pbkids$bld82)
temp<-lm(iq~bld82,data=pbkids)
temp
summary(temp)
print("names for temp")
names(temp)
print("names for summary(temp)")
names(summary(temp))
temp<-lm(iq~bld82,data=pbkids)
temp
summary(temp)
print("names for temp")
names(temp)
print("names for summary(temp)")
names(summary(temp))
#ie temp$coefficients vs summary(temp)$coefficients
### null model ###
m0<-lm(iq~1,data=pbkids[!is.na(pbkids$bld82),]) ## instead of ChatGPTs na.omit()
### full model ###
m1<-lm(iq~bld82,data=pbkids)
### ANOVA - comparing models ###
anova(m0,m1)
summary(lm(iq~1, data=pbkids))
tvalue.100 <- (91.081-100) / 1.294
pt(tvalue.100, df = 123, lower.tail = T)*2
par(mfrow=c(1,1))
plot(iq~bld82, data=pbkids)
abline(h=100, col="blue", lty=2)
abline(v=5, col="red", lty=2)
abline(v=10, col="red", lty=2)
library(ggplot2)
ggplot(pbkids, aes(y = iq, x = bld82)) +
geom_point(col = "black") +
geom_smooth(aes(x = bld82,y = iq), method="lm", level=0.99) + # level is 1- (alpha/2), where alpha = 0.01
theme_bw()
ggplot(pbkids, aes(y = iq, x = bld82)) +
geom_point(col = "black") +
geom_smooth(aes(x = bld82,y = iq), method="lm", level=0.80) +  # alpha = 0.2
theme_bw()
temp<-lm(iq~bld82,data=pbkids)
d = data.frame(pbkids[!is.na(pbkids$bld82),], predict(temp, interval="prediction"))
ggplot(d, aes(y = iq, x = bld82)) +
geom_ribbon(aes(ymin=lwr,ymax=upr,fill="prediction")) +
geom_smooth(method="lm",aes(fill="confidence")) +
geom_smooth(aes(x = bld82,y = iq), method="lm") +
geom_point(col = "black") +
scale_fill_manual('Interval', values = c('blue', 'gray')) +
theme_bw()
predict(temp, new=data.frame(bld82=5),interval="confidence")
predict(temp, new=data.frame(bld82=5),interval="prediction")
predict(temp, new=data.frame(bld82=5),interval="confidence", level=0.90)
predict(temp, new=data.frame(bld82=5),interval="prediction", level=0.90)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(DT)
library(tidyverse)
SBP <- read_txt("sbp.txt")
SBP
SBP <- read_text("sbp.txt")
SBP
SBP <- read_delim("sbp.txt", delim = " ")
view(SBP)
SBP <- read_table("sbp.txt")
colnames(SBP) <- c("ID", "AGE", "SBP", "SEX")
SBP
SBP
SBP <- read_table("sbp.txt", trim_ws = T)
colnames(SBP) <- c("ID", "AGE", "SBP", "SEX")
SBP
SBP <- read_table("sbp.txt", trim_ws = TRUE)
colnames(SBP) <- c("ID", "AGE", "SBP", "SEX")
SBP
SBP <- read_table("sbp.txt")
SBP_base <- read.table("sbp.txt")
SBP
SBP_base
SBP <- read.table("sbp.txt")
colnames(SBP) <- c("ID", "AGE", "SBP", "SEX")
SBP
summary(data$age)
summary(data$SBP)
data <- read.table("sbp.txt")
colnames(data) <- c("ID", "AGE", "SBP", "SEX")
summary(data$age)
summary(data$SBP)
data
summary(data$age)
summary(data$SBP)
data <- read.table("sbp.txt")
colnames(data) <- c("id", "age", "sbp", "sex")
data
summary(data$AGE)
summary(data$SBP)
summary(data$age)
summary(data$sbp)
age_plot <- ggplot(data, aes(x=age))+ geom_histogram(color="red", fill="red")
sbp_plot <- ggplot(data, aes(x=sbp))+ geom_histogram(color="blue", fill="blue")
age_plot <- ggplot(data, aes(x=age))+ geom_histogram(color="red", fill="red")
sbp_plot <- ggplot(data, aes(x=sbp))+ geom_histogram(color="blue", fill="blue")
age_plot
sbp_plot
age_plot <- ggplot(data, aes(x=age))+ geom_histogram(color="red", fill="red", bins = 5)
sbp_plot <- ggplot(data, aes(x=sbp))+ geom_histogram(color="blue", fill="blue", bins = 5)
age_plot
sbp_plot
age_plot <- ggplot(data, aes(x=age))+ geom_histogram(color="red", fill="red", bins = 10)
sbp_plot <- ggplot(data, aes(x=sbp))+ geom_histogram(color="blue", fill="blue", bins = 10)
age_plot
sbp_plot
age_plot <- ggplot(data, aes(x=age))+ geom_histogram(color="red", bins = 10)
sbp_plot <- ggplot(data, aes(x=sbp))+ geom_histogram(color="blue", bins = 10)
age_plot
sbp_plot
age_plot <- ggplot(data, aes(x=age))+ geom_histogram(color="red", fill="white", bins = 10) + theme_minimal()
sbp_plot <- ggplot(data, aes(x=sbp))+ geom_histogram(color="blue", fill = "white", bins = 10) + theme_minimal()
age_plot
sbp_plot
age_plot <- ggplot(data, aes(x=age))+ geom_histogram(color="red", fill="#ea4f4f", bins = 10) + theme_minimal()
sbp_plot <- ggplot(data, aes(x=sbp))+ geom_histogram(color="blue", fill = "#4fbcea", bins = 10) + theme_minimal()
age_plot
sbp_plot
age_plot <- ggplot(data, aes(x=age))+ geom_histogram(color="black", fill="#ea4f4f", bins = 10) + theme_minimal()
sbp_plot <- ggplot(data, aes(x=sbp))+ geom_histogram(color="black", fill = "#4fbcea", bins = 10) + theme_minimal()
age_plot
sbp_plot
runApp('Desktop/GitHub/eXtraordinarYBabiesStudy_ShinyApps/Madeline')
runApp('Desktop/GitHub/eXtraordinarYBabiesStudy_ShinyApps/Liam')
